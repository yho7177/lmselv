package kr.happyjob.study.lmg.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.lmg.model.LmgListModel;
import kr.happyjob.study.lmg.service.LmgService;

@Controller
@RequestMapping("/lmg/")
public class LmgConroller {
	
	@Autowired
	LmgService lmgService;
	
	private final Logger logger = LogManager.getLogger(this.getClass());
	private final String className = this.getClass().toString();
	
	//관리자 강의 초기화면
	@RequestMapping("lectureMgt.do")
	public String initComCod(Model model, @RequestParam Map<String, Object> paramMap, HttpServletResponse response,
							HttpServletRequest request, HttpSession session) throws Exception{
		String userType = (String)session.getAttribute("userType");
		model.addAttribute("usertype", userType);
		
		List<LmgListModel> listModel = lmgService.initComCod(paramMap);
		model.addAttribute("listModel", listModel);
		
		logger.info("start" + className + ".initComCod");
		logger.info("paramMap" + paramMap);
		logger.info("end" + className + "initComCod");
		return "/lmg/lmgcomcod";
		
	}

	
	//관리자 강의 목록 조회
	@RequestMapping("listLmg.do")
	public String listLgmGrp(Model model, @RequestParam Map<String, Object> paramMap, HttpServletResponse response,
							HttpServletRequest request, HttpSession session) throws Exception{
		
		logger.info("start" + className + ".listLmgGrp");
		logger.info("paramMap" + paramMap);
		
		int currentPage = Integer.parseInt((String)paramMap.get("currentPage"));
		int pageSize = Integer.parseInt((String)paramMap.get("pageSize"));
		int pageIndex = (currentPage-1)*pageSize;
		
		
		paramMap.put("pageIndex", pageIndex);
		paramMap.put("pageSize", pageSize);
		
		List<LmgListModel> listModel = lmgService.listLmgGrp(paramMap);
		model.addAttribute("listModel", listModel);
		
		int totalCount = lmgService.countListComnGrpCod(paramMap);
		model.addAttribute("countListComnGrpCod", totalCount);
		model.addAttribute("pageSize", pageSize);
		model.addAttribute("currentPageComGrpCod", currentPage);
		
		logger.info("end" + className + ".listLmgGrp");
		
		return "/lmg/lmgListGrp";
	}
	
	//관리자 강의 단건 조회
	@RequestMapping("selectLmg.do")
	@ResponseBody
	public Map<String, Object> selectLmgGrp(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response) throws Exception{
		
		logger.info("start" + className + ".selectLmg");
		logger.info("paramMap" + paramMap);
		
		String result = "SUCCESS";
		String resultMsg = "강의가 조희 되었습니다.";
		
		LmgListModel lmgListModel = lmgService.selectLmgGrp(paramMap);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("result", result);
		resultMap.put("resultMsg", resultMsg);
		resultMap.put("lmgListModel", lmgListModel);
		
		logger.info("end" + className + ".selectLmg" );
		
		return resultMap;
	}
	
	//관리자 강의저장
	@RequestMapping("saveLmg.do")
	@ResponseBody
	public Map<String, Object> saveLmgGrp(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session ) throws Exception{
		
		logger.info("start" + className + ".saveLmg");
		logger.info("paramMap" + paramMap);
		
		String action = (String)paramMap.get("action");
		String result = "SUCCESS";
		String resultMsg = "강의를 저장했습니다.";
		
		paramMap.put("fst_rgst_sst_id", session.getAttribute("loginID"));
		paramMap.put("fnl_mdfr_sst_id", session.getAttribute("loginID"));
		
		if("I".equals(action)){
			lmgService.insertLmg(paramMap);
		} else if("U".equals(action)){
			lmgService.updateLmg(paramMap);
		} else{
			result = "FALSE";
			resultMsg = "알수 없는 요청 입니다.";
		}
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("result", result);
		resultMap.put("resultMsg", resultMsg);
		
		logger.info("end" + className + ".saveLmg");
		
		return resultMap;
	}
	
	//관리자 강의삭제
	@RequestMapping("deleteLmg.do")
	public Map<String, Object> deleteLmg(Model model, @RequestParam Map<String, Object> paramMap, HttpServletRequest request,
			HttpServletResponse response, HttpSession session) throws Exception{
		
		logger.info("start" + className + ".deleteLmg");
		logger.info("paramMap" + paramMap);
		
		String result = "SUCCESS";
		String resultMsg = "강의를 삭제했습니다.";
		
		lmgService.deleteLmg(paramMap);
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("rsult", result);
		resultMap.put("rsultMsg", resultMsg);
		
		logger.info("end" + className + ".deleteLmg");
		
		return resultMap;
	}
		//학생 강의 초기화면
		@RequestMapping("lecture.do")
		public String Student(Model model, @RequestParam Map<String, Object> paramMap, HttpServletResponse response,
				HttpServletRequest request, HttpSession session) throws Exception{
			String userType = (String)session.getAttribute("userType");
			model.addAttribute("userType", userType);
			logger.info("start" + className + ".Student");
			logger.info("userType"+userType);
			logger.info("end" + className + "initComCod");
			return "lmg/lmgStudent";
			
		}

		
}
