package kr.happyjob.study.lmg.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.tomcat.jni.Status;
import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.happyjob.study.lmg.model.ClassInfo;
import kr.happyjob.study.lmg.model.PagingInfo;
import kr.happyjob.study.lmg.model.Test;
import kr.happyjob.study.lmg.model.TestInfo;
import kr.happyjob.study.lmg.service.LmgExamAService;

/**
/**

  * @FileName : LmgExamController.java

  * @Project : lmselv

  * @Date : 2021. 11. 11. 

  * @작성자 : 윤효열

  * @변경이력 :

  * @프로그램 설명 : 관리자가 접근 가능한 시험관련 페이지

  */
@Controller
@RequestMapping("/lmg/")
public class LmgExamAController {
	
	@Autowired
	LmgExamAService service;
	
	/**
	
	  * @Method Name : examMgt
	
	  * @작성일 : 2021. 11. 11.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 관리자 - 학습관리 - 시험문제관리 페이지 (관리자용)
	
	  * @return
	
	  */
	@RequestMapping("examMgt.do")
	public String examMgt(Model model, @RequestParam(value ="searchWord", required=false) String searchWord, @RequestParam(value ="pageNo", required=false) String tmp ) {
		int pageNo = 0;
		if(tmp == null) {
			pageNo = 1;
		} else {
			pageNo = Integer.parseInt(tmp);
		}
		
		try {
			Map<String, Object> result = service.getLectureList(searchWord, pageNo); // 현재 진행중인 강의 목록 가져오기(시험 등록 위해)
			List<ClassInfo> lst = (List<ClassInfo>) result.get("lst");
			PagingInfo pi = (PagingInfo) result.get("pi");
			
			if(lst.size() == 0) {
				
				String message = "검색결과가 없습니다!";
				model.addAttribute("result", message);
			}
			System.out.println(lst.toString());
			model.addAttribute("lecture", lst);
			model.addAttribute("pi", pi);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return "lmg/examMgt";
	}
	
	/**
	
	  * @Method Name : getTestList
	
	  * @작성일 : 2021. 11. 12.
	
	  * @작성자 : user
	
	  * @변경이력 : 
	
	  * @Method 설명 : 학습관리 - 시험문제관리에서 과정명 클릭했을떄 과정에 대한 시험 리스트 출력하는 AJAX
	
	  * @param l_no
	
	  */
	@RequestMapping(value="getTestList", method= RequestMethod.POST)
	public void getTestList(@RequestParam("l_no")String l_no, Model model,@RequestParam(value ="pageNo", required=false) String tmp) {
		System.out.println("!");
		int pageNo = 0;
		if(tmp == null) {
			pageNo = 1;
		} else {
			pageNo = Integer.parseInt(tmp);
		}
		try {
			Map<String, Object> map = service.getTestList(l_no, pageNo);
			List<TestInfo> lst = (List<TestInfo>) map.get("lst");
			PagingInfo pi = (PagingInfo) map.get("pi");
			model.addAttribute("testLst", lst);
			model.addAttribute("testPi", pi);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // 학습관리 - 시험문제관리에서 과정명 클릭했을떄 과정에 대한 시험 리스트
	}
	
	/**
	
	  * @Method Name : addTestFir
	
	  * @작성일 : 2021. 11. 12.
	
	  * @작성자 :윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 시험 정보 등록 ajax
	
	  * @param info
	
	  */
	@RequestMapping(value="addTestFir", method=RequestMethod.POST)
	@ResponseBody
	public void addTestFir(TestInfo info) {
		try {
			service.addTestFir(info); // 시험 정보 등록하는 ajax
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	
	  * @Method Name : problemAdd
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 :  시험 문제 등록하는 ajax
	
	  * @param paramMap
	
	  */
	@RequestMapping(value="problemAdd", method=RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<String> problemAdd(@RequestParam Map<String, Object> paramMap ) {
		try {
			int i = service.problemAdd(paramMap);
			return new ResponseEntity<String>("success", HttpStatus.OK);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity<String>("fail", HttpStatus.BAD_REQUEST);
		}
		
	}
	
	/**
	
	  * @Method Name : getProblemList
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 시험문제 등록 모달에서 문제 list 출력하는 ajax
	
	  * @param paramMap
	  * @param model
	
	  */
	@RequestMapping(value="getProblemList", method=RequestMethod.POST)
	public void getProblemList(@RequestParam Map<String, Object> paramMap, Model model) {
		try {
			List<Test> lst = service.getProblemList(paramMap);
			model.addAttribute("lst", lst);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	/**
	
	  * @Method Name : problemDetail
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 시험문제등록 모달에서 문제를 클릭했을떄 정보 가져오기 ajax(수정을 위함)
	
	  * @param paramMap
	
	  */
	@RequestMapping(value="problemDetail", method = RequestMethod.POST)
	public void problemDetail(@RequestParam Map<String, Object> paramMap, HttpServletRequest req, HttpServletResponse resp) {
		try {
			Test test = service.probelmDetail(paramMap);
			JSONObject json = new JSONObject();
			json.put("q_no", test.getQ_no());
			json.put("t_que", test.getT_que());
			json.put("t_ans", test.getT_ans());
			json.put("t_ex1", test.getT_ex1());
			json.put("t_ex2", test.getT_ex2());
			json.put("t_ex3", test.getT_ex3());
			json.put("t_ex4", test.getT_ex4());
			json.put("test_no", test.getTest_no());
			
			resp.setContentType("application/json");
			resp.setCharacterEncoding("utf-8");
			resp.getWriter().print(json);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	
	  * @Method Name : deleteProblem
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 시험 문제하나를 삭제하는 ajax
	
	  * @param paramMap
	
	  */
	@RequestMapping(value="deleteProblem", method=RequestMethod.POST)
	public ResponseEntity<String> deleteProblem(@RequestParam Map<String, Object> paramMap) {
		try {
			int i = service.deleteProblem(paramMap);
			return new ResponseEntity<String>("success", HttpStatus.OK);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity<String>("fail", HttpStatus.BAD_REQUEST);
		}
		
	}
	
	/**
	
	  * @Method Name : updateProblem
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : 윤효열
	
	  * @변경이력 : 
	
	  * @Method 설명 : 시험문제 수정하는 ajax
	
	  * @param paramMap
	  * @return
	
	  */
	@RequestMapping(value="updateProblem", method=RequestMethod.POST)
	public ResponseEntity<String> updateProblem(@RequestParam Map<String, Object> paramMap) {
		try {
			int i = service.updateProblem(paramMap);
			return new ResponseEntity<String>("success", HttpStatus.OK);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return new ResponseEntity<String>("fail", HttpStatus.BAD_REQUEST);
		}
	}
	
	/**
	
	  * @Method Name : exsubjectMgt
	
	  * @작성일 : 2021. 11. 15.
	
	  * @작성자 : user
	
	  * @변경이력 : 
	
	  * @Method 설명 :
	
	  * @param model
	  * @param searchWord
	  * @param tmp
	
	  */
	@RequestMapping("exsubjectMgt.do")
	public void exsubjectMgt(Model model, @RequestParam(value ="searchWord", required=false) String searchWord, @RequestParam(value ="pageNo", required=false) String tmp) {
		int pageNo = 0;
		if(tmp == null) {
			pageNo = 1;
		} else {
			pageNo = Integer.parseInt(tmp);
		}
		
		try {
			Map<String, Object> result = service.getLectureList(searchWord, pageNo); // 현재 진행중인 강의 목록 가져오기(시험 등록 위해)
			List<ClassInfo> lst = (List<ClassInfo>) result.get("lst");
			PagingInfo pi = (PagingInfo) result.get("pi");
			
			if(lst.size() == 0) {
				
				String message = "검색결과가 없습니다!";
				model.addAttribute("result", message);
			}
			System.out.println(lst.toString());
			model.addAttribute("lecture", lst);
			model.addAttribute("pi", pi);
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}
}
